"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Exchange = void 0;
const big_js_1 = __importDefault(require("big.js"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const zeroEx_1 = require("../clients/zeroEx");
const Constants_1 = require("../lib/Constants");
const ContractCallHelpers_1 = require("../lib/ContractCallHelpers");
const heleprs_1 = require("../lib/heleprs");
const types_1 = require("../types");
class Exchange {
    constructor(contracts) {
        this.contracts = contracts;
    }
    getAddress() {
        return this.contracts.starkwarePerpetual.options.address;
    }
    getProxyDepositAddress() {
        return this.contracts.proxyDepositContract.options.address;
    }
    async register({ ethAddress, starkKey, signature, }, options) {
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods.registerUser(ethAddress, (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), signature), options);
    }
    async registerAndDeposit({ ethAddress, starkKey, signature, positionId, humanAmount, }, options) {
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods.registerAndDepositERC20(ethAddress, (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), signature, Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId], (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount)), options);
    }
    async deposit({ starkKey, positionId, humanAmount, }, options) {
        const depositFunctionSignature = 'deposit(uint256,uint256,uint256,uint256)';
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods[depositFunctionSignature]((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId], (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount)), options);
    }
    async proxyDeposit({ humanAmount, starkKey, positionId, }, options) {
        return this.contracts.send(this.contracts.proxyDepositContract, this.contracts.proxyDepositContract.methods.deposit((0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount), (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId)), options);
    }
    async approveSwap({ tokenFrom, allowanceTarget, }, options) {
        return this.contracts.send(this.contracts.proxyDepositContract, this.contracts.proxyDepositContract.methods.approveSwap(tokenFrom, allowanceTarget), options);
    }
    async proxyDepositERC20({ humanMinUsdcAmount, starkKey, positionId, zeroExResponseObject, }, options) {
        return this.contracts.send(this.contracts.proxyDepositContract, this.contracts.proxyDepositContract.methods.depositERC20(zeroExResponseObject.sellTokenAddress, zeroExResponseObject.sellAmount, (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanMinUsdcAmount), (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), zeroExResponseObject.to, zeroExResponseObject.data), options);
    }
    async approveSwapAndProxyDepositERC20({ humanMinUsdcAmount, starkKey, positionId, zeroExResponseObject, }, options) {
        return this.contracts.send(this.contracts.proxyDepositContract, this.contracts.proxyDepositContract.methods.approveSwapAndDepositERC20(zeroExResponseObject.sellTokenAddress, zeroExResponseObject.sellAmount, (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanMinUsdcAmount), (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), zeroExResponseObject.to, zeroExResponseObject.allowanceTarget, zeroExResponseObject.data), options);
    }
    async proxyDepositEth({ starkKey, positionId, zeroExResponseObject, }, options) {
        if ((options === null || options === void 0 ? void 0 : options.value) !== undefined && !(0, big_js_1.default)(options.value).eq(zeroExResponseObject.value)) {
            throw Error(`proxyDepositEth: A transaction value ${options.value} was provided which does not match the swap cost of ${zeroExResponseObject.value}`);
        }
        return this.contracts.send(this.contracts.proxyDepositContract, this.contracts.proxyDepositContract.methods.depositEth(zeroExResponseObject.buyAmount, (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), zeroExResponseObject.to, zeroExResponseObject.data), { ...options, value: zeroExResponseObject.value });
    }
    /**
     * @description get expected and worst USDC for some amount of input sellToken.
     * @notice For eth pass in 'ETH' as the sellToken.
     */
    async estimateConversionAmount({ humanSellAmount, sellToken, slippageFraction, }) {
        (0, zeroEx_1.validateSlippage)(slippageFraction);
        const sellAmount = (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanSellAmount);
        const zeroExResponseObject = await (0, zeroEx_1.getZeroExSwapQuote)({
            sellAmount,
            sellToken,
            buyTokenAddress: (0, heleprs_1.getUsdcAddress)(this.contracts.networkId),
            slippageFraction,
            networkId: this.contracts.networkId,
        });
        const expectedUsdcHumanAmount = (0, big_js_1.default)(zeroExResponseObject.buyAmount);
        expectedUsdcHumanAmount.e -= types_1.BASE_DECIMALS;
        const worstUsdcHumanAmount = (0, big_js_1.default)(sellAmount).div(zeroExResponseObject.guaranteedPrice);
        worstUsdcHumanAmount.e -= types_1.BASE_DECIMALS;
        return {
            expectedUsdcHumanAmount: expectedUsdcHumanAmount.round(types_1.BASE_DECIMALS, 0).toString(),
            worstUsdcHumanAmount: worstUsdcHumanAmount.round(types_1.BASE_DECIMALS, 0).toString(),
            zeroExResponseObject,
        };
    }
    async withdraw({ starkKey, }, options) {
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods.withdraw((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId]), options);
    }
    async withdrawTo({ starkKey, recipient, }, options) {
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods.withdrawTo((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId], recipient), options);
    }
    async forcedWithdrawalRequest({ starkKey, positionId, humanAmount, premiumCost, }, options) {
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods.forcedWithdrawalRequest((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount), premiumCost), options);
    }
    // ============ Getters ============
    async getEthKey({ starkKey, }, options) {
        try {
            const result = await this.contracts.call(this.contracts.starkwarePerpetual.methods.getEthKey((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey)), options);
            return result;
        }
        catch (e) {
            if (e.message && e.message.includes('USER_UNREGISTERED')) {
                return null;
            }
            throw e;
        }
    }
    async getWithdrawalBalance({ starkKey, }, options) {
        const result = await this.contracts.call(this.contracts.starkwarePerpetual.methods.getWithdrawalBalance((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId]), options);
        return (0, ContractCallHelpers_1.uint256ToHumanCollateralTokenAmount)(result);
    }
    async hasCancellationRequest({ starkKey, vaultId, }, options) {
        const result = await this.contracts.call(this.contracts.starkwarePerpetual.methods.getCancellationRequest((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId], (0, ContractCallHelpers_1.bignumberableToUint256)(vaultId)), options);
        return !new bignumber_js_1.default(result).isZero();
    }
    async hasForcedWithdrawalRequest({ starkKey, positionId, humanAmount, }, options) {
        const result = await this.contracts.call(this.contracts.starkwarePerpetual.methods.getForcedWithdrawalRequest((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount)), options);
        return !new bignumber_js_1.default(result).isZero();
    }
}
exports.Exchange = Exchange;
//# sourceMappingURL=data:application/json;base64,