"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Contracts = void 0;
/*

    Copyright 2019 dYdX Trading Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*/
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const lodash_1 = __importDefault(require("lodash"));
const fact_registry_abi_json_1 = __importDefault(require("../contracts/fact-registry-abi.json"));
const mintable_token_abi_json_1 = __importDefault(require("../contracts/mintable-token-abi.json"));
const proxy_deposit_abi_json_1 = __importDefault(require("../contracts/proxy-deposit-abi.json"));
const starkware_perpetual_abi_json_1 = __importDefault(require("../contracts/starkware-perpetual-abi.json"));
const usdc_abi_json_1 = __importDefault(require("../contracts/usdc-abi.json"));
// Contracts
const types_1 = require("../types");
var OUTCOMES;
(function (OUTCOMES) {
    OUTCOMES[OUTCOMES["INITIAL"] = 0] = "INITIAL";
    OUTCOMES[OUTCOMES["RESOLVED"] = 1] = "RESOLVED";
    OUTCOMES[OUTCOMES["REJECTED"] = 2] = "REJECTED";
})(OUTCOMES || (OUTCOMES = {}));
class Contracts {
    constructor(provider, networkId, web3, sendOptions = {}) {
        this.contractsList = [];
        this.web3 = web3;
        this.defaultOptions = {
            gas: null,
            gasPrice: undefined,
            value: 0,
            from: null,
            confirmations: 0,
            confirmationType: types_1.ConfirmationType.Confirmed,
            gasMultiplier: 1.5,
            ...sendOptions,
        };
        this.networkId = networkId;
        // Contracts
        this.factRegistry = this.addContract(fact_registry_abi_json_1.default);
        this.starkwarePerpetual = this.addContract(starkware_perpetual_abi_json_1.default);
        this.collateralToken = this.addContract(usdc_abi_json_1.default);
        this.mintableToken = this.addContract(mintable_token_abi_json_1.default);
        this.proxyDepositContract = this.addContract(proxy_deposit_abi_json_1.default);
        this.setProvider(provider, networkId);
        this.setDefaultAccount(this.web3.eth.defaultAccount);
    }
    setProvider(provider, networkId) {
        this.networkId = networkId;
        this.contractsList.forEach((contract) => this.setContractProvider(contract.contract, contract.json, provider, networkId));
    }
    setDefaultAccount(account) {
        this.contractsList.forEach((contract) => {
            contract.contract.options.from = account;
        });
    }
    async call(method, specificOptions = {}) {
        const { blockNumber, ...otherOptions } = this.toCallOptions({
            ...this.defaultOptions,
            ...specificOptions,
        });
        return method.call(otherOptions, blockNumber || 'latest');
    }
    async send(contract, method, specificOptions = {}) {
        const sendOptions = {
            ...this.defaultOptions,
            ...specificOptions,
        };
        const result = await this._send(contract, method, sendOptions);
        return result;
    }
    // ============ Helper Functions ============
    addContract(json, isTest = false) {
        const contract = new this.web3.eth.Contract(json.abi);
        this.contractsList.push({ contract, json, isTest });
        return contract;
    }
    setContractProvider(contract, contractJson, provider, networkId) {
        contract.setProvider(provider);
        // Use market-specific info if available, and fall back to non-market-specific info.
        const deployedInfo = contractJson.networks[networkId];
        contract.options.address = deployedInfo && deployedInfo.address;
    }
    async _send(// tslint:disable-line:function-name
    contract, method, sendOptions = {}) {
        const { confirmations, confirmationType, gasMultiplier, ...txOptions } = sendOptions;
        if (confirmationType && !Object.values(types_1.ConfirmationType).includes(confirmationType)) {
            throw new Error(`Invalid confirmation type: ${confirmationType}`);
        }
        if (confirmationType === types_1.ConfirmationType.Simulate || !txOptions.gas) {
            const gasEstimate = await this.estimateGas(method, txOptions);
            txOptions.gas = Math.floor(gasEstimate * gasMultiplier);
            if (confirmationType === types_1.ConfirmationType.Simulate) {
                return {
                    gasEstimate,
                    gas: txOptions.gas,
                };
            }
        }
        let hashOutcome = OUTCOMES.INITIAL;
        let confirmationOutcome = OUTCOMES.INITIAL;
        if (confirmationType === types_1.ConfirmationType.Sender) {
            const data = method.encodeABI();
            const from = txOptions.from || this.web3.defaultAccount;
            if (from === null) {
                throw new Error('Cannot sendTransaction with from=null');
            }
            if (lodash_1.default.isNil(txOptions.nonce)) {
                throw new Error('Cannot sendTransaction with nonce=null');
            }
            const nonceIsHexString = (typeof txOptions.nonce === 'string') &&
                txOptions.nonce.includes('0x');
            const nonceBn = new bignumber_js_1.default(txOptions.nonce, nonceIsHexString ? 16 : 10);
            const stPromi = this.web3.eth.sendTransaction({
                gas: txOptions.gas,
                value: txOptions.value,
                gasPrice: txOptions.gasPrice,
                to: contract.options.address,
                from,
                nonce: nonceBn.toNumber(),
                data,
            });
            const stPromise = new Promise((resolve, reject) => {
                stPromi.on('error', (error) => {
                    if (hashOutcome === OUTCOMES.INITIAL) {
                        hashOutcome = OUTCOMES.REJECTED;
                        reject(error);
                        stPromi.off();
                    }
                });
                stPromi.on('transactionHash', (txHash) => {
                    if (hashOutcome === OUTCOMES.INITIAL) {
                        hashOutcome = OUTCOMES.RESOLVED;
                        resolve(txHash);
                        stPromi.off();
                    }
                });
            });
            const stResult = await stPromise;
            return this.normalizeResponse({ transactionHash: stResult });
        }
        const promi = method.send(this.toNativeSendOptions(txOptions));
        let transactionHash;
        let hashPromise;
        let confirmationPromise;
        if (confirmationType && [
            types_1.ConfirmationType.Hash,
            types_1.ConfirmationType.Both,
        ].includes(confirmationType)) {
            hashPromise = new Promise((resolve, reject) => {
                promi.on('error', (error) => {
                    if (hashOutcome === OUTCOMES.INITIAL) {
                        hashOutcome = OUTCOMES.REJECTED;
                        reject(error);
                        promi.off();
                    }
                });
                promi.on('transactionHash', (txHash) => {
                    if (hashOutcome === OUTCOMES.INITIAL) {
                        hashOutcome = OUTCOMES.RESOLVED;
                        resolve(txHash);
                        if (confirmationType !== types_1.ConfirmationType.Both) {
                            promi.off();
                        }
                    }
                });
            });
            transactionHash = await hashPromise;
        }
        if (confirmationType && [
            types_1.ConfirmationType.Confirmed,
            types_1.ConfirmationType.Both,
        ].includes(confirmationType)) {
            confirmationPromise = new Promise((resolve, reject) => {
                promi.on('error', (error) => {
                    if (confirmationOutcome === OUTCOMES.INITIAL &&
                        (confirmationType === types_1.ConfirmationType.Confirmed ||
                            hashOutcome === OUTCOMES.RESOLVED)) {
                        confirmationOutcome = OUTCOMES.REJECTED;
                        reject(error);
                        promi.off();
                    }
                });
                if (confirmations) {
                    promi.on('confirmation', (confNumber, receipt) => {
                        if (confNumber >= confirmations) {
                            if (confirmationOutcome === OUTCOMES.INITIAL) {
                                confirmationOutcome = OUTCOMES.RESOLVED;
                                resolve(receipt);
                                promi.off();
                            }
                        }
                    });
                }
                else {
                    promi.on('receipt', (receipt) => {
                        confirmationOutcome = OUTCOMES.RESOLVED;
                        resolve(receipt);
                        promi.off();
                    });
                }
            });
        }
        if (confirmationType === types_1.ConfirmationType.Hash) {
            return this.normalizeResponse({ transactionHash });
        }
        if (confirmationType === types_1.ConfirmationType.Confirmed) {
            return confirmationPromise;
        }
        return this.normalizeResponse({
            transactionHash,
            confirmation: confirmationPromise,
        });
    }
    async estimateGas(method, txOptions) {
        const estimateOptions = this.toEstimateOptions(txOptions);
        try {
            const gasEstimate = await method.estimateGas(estimateOptions);
            return gasEstimate;
        }
        catch (error) {
            error.transactionData = {
                ...estimateOptions,
                data: method.encodeABI(),
                to: method._parent._address,
            };
            throw error;
        }
    }
    // ============ Parse Options ============
    toEstimateOptions(options) {
        return lodash_1.default.pick(options, [
            'from',
            'value',
        ]);
    }
    toCallOptions(options) {
        return lodash_1.default.pick(options, [
            'from',
            'value',
            'blockNumber',
        ]);
    }
    toNativeSendOptions(options) {
        return lodash_1.default.pick(options, [
            'from',
            'value',
            'gasPrice',
            'gas',
            'nonce',
        ]);
    }
    normalizeResponse(txResult) {
        const txHash = txResult.transactionHash;
        if (txHash) {
            const { transactionHash: internalHash, nonce: internalNonce, } = txHash;
            if (internalHash) {
                txResult.transactionHash = internalHash;
            }
            if (internalNonce) {
                txResult.nonce = internalNonce;
            }
        }
        return txResult;
    }
}
exports.Contracts = Contracts;
//# sourceMappingURL=data:application/json;base64,